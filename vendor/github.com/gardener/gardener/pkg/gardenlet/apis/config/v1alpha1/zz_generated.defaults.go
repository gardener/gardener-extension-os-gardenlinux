//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by defaulter-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&GardenletConfiguration{}, func(obj interface{}) { SetObjectDefaults_GardenletConfiguration(obj.(*GardenletConfiguration)) })
	return nil
}

func SetObjectDefaults_GardenletConfiguration(in *GardenletConfiguration) {
	SetDefaults_GardenletConfiguration(in)
	if in.GardenClientConnection != nil {
		SetDefaults_GardenClientConnection(in.GardenClientConnection)
		SetDefaults_ClientConnectionConfiguration(&in.GardenClientConnection.ClientConnectionConfiguration)
		if in.GardenClientConnection.KubeconfigValidity != nil {
			SetDefaults_KubeconfigValidity(in.GardenClientConnection.KubeconfigValidity)
		}
	}
	if in.SeedClientConnection != nil {
		SetDefaults_ClientConnectionConfiguration(&in.SeedClientConnection.ClientConnectionConfiguration)
	}
	if in.ShootClientConnection != nil {
		SetDefaults_ClientConnectionConfiguration(&in.ShootClientConnection.ClientConnectionConfiguration)
	}
	if in.Controllers != nil {
		SetDefaults_GardenletControllerConfiguration(in.Controllers)
		if in.Controllers.BackupBucket != nil {
			SetDefaults_BackupBucketControllerConfiguration(in.Controllers.BackupBucket)
		}
		if in.Controllers.BackupEntry != nil {
			SetDefaults_BackupEntryControllerConfiguration(in.Controllers.BackupEntry)
		}
		if in.Controllers.Bastion != nil {
			SetDefaults_BastionControllerConfiguration(in.Controllers.Bastion)
		}
		if in.Controllers.ControllerInstallation != nil {
			SetDefaults_ControllerInstallationControllerConfiguration(in.Controllers.ControllerInstallation)
		}
		if in.Controllers.ControllerInstallationCare != nil {
			SetDefaults_ControllerInstallationCareControllerConfiguration(in.Controllers.ControllerInstallationCare)
		}
		if in.Controllers.ControllerInstallationRequired != nil {
			SetDefaults_ControllerInstallationRequiredControllerConfiguration(in.Controllers.ControllerInstallationRequired)
		}
		if in.Controllers.Seed != nil {
			SetDefaults_SeedControllerConfiguration(in.Controllers.Seed)
		}
		if in.Controllers.SeedCare != nil {
			SetDefaults_SeedCareControllerConfiguration(in.Controllers.SeedCare)
		}
		if in.Controllers.Shoot != nil {
			SetDefaults_ShootControllerConfiguration(in.Controllers.Shoot)
		}
		if in.Controllers.ShootCare != nil {
			SetDefaults_ShootCareControllerConfiguration(in.Controllers.ShootCare)
			if in.Controllers.ShootCare.StaleExtensionHealthChecks != nil {
				SetDefaults_StaleExtensionHealthChecks(in.Controllers.ShootCare.StaleExtensionHealthChecks)
			}
		}
		if in.Controllers.ShootState != nil {
			SetDefaults_ShootStateControllerConfiguration(in.Controllers.ShootState)
		}
		if in.Controllers.NetworkPolicy != nil {
			SetDefaults_NetworkPolicyControllerConfiguration(in.Controllers.NetworkPolicy)
		}
		if in.Controllers.ManagedSeed != nil {
			SetDefaults_ManagedSeedControllerConfiguration(in.Controllers.ManagedSeed)
		}
		if in.Controllers.TokenRequestor != nil {
			SetDefaults_TokenRequestorControllerConfiguration(in.Controllers.TokenRequestor)
		}
		if in.Controllers.VPAEvictionRequirements != nil {
			SetDefaults_VPAEvictionRequirementsControllerConfiguration(in.Controllers.VPAEvictionRequirements)
		}
	}
	if in.LeaderElection != nil {
		SetDefaults_LeaderElectionConfiguration(in.LeaderElection)
	}
	SetDefaults_ServerConfiguration(&in.Server)
	if in.Logging != nil {
		SetDefaults_Logging(in.Logging)
	}
	if in.SNI != nil {
		SetDefaults_SNI(in.SNI)
		if in.SNI.Ingress != nil {
			SetDefaults_SNIIngress(in.SNI.Ingress)
		}
	}
	if in.ETCDConfig != nil {
		SetDefaults_ETCDConfig(in.ETCDConfig)
		if in.ETCDConfig.ETCDController != nil {
			SetDefaults_ETCDController(in.ETCDConfig.ETCDController)
		}
		if in.ETCDConfig.CustodianController != nil {
			SetDefaults_CustodianController(in.ETCDConfig.CustodianController)
		}
		if in.ETCDConfig.BackupCompactionController != nil {
			SetDefaults_BackupCompactionController(in.ETCDConfig.BackupCompactionController)
		}
	}
	for i := range in.ExposureClassHandlers {
		a := &in.ExposureClassHandlers[i]
		if a.SNI != nil {
			SetDefaults_SNI(a.SNI)
			if a.SNI.Ingress != nil {
				SetDefaults_SNIIngress(a.SNI.Ingress)
			}
		}
	}
	if in.Monitoring != nil {
		SetDefaults_MonitoringConfig(in.Monitoring)
		if in.Monitoring.Shoot != nil {
			SetDefaults_ShootMonitoringConfig(in.Monitoring.Shoot)
		}
	}
}
